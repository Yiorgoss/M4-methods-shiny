ls
clear
clear()
input <- read.csv("/Downloads/specdata")
input <- read.csv("Downloads/specdata")
parseData <- function(001:332){}
input <- read.csv("Downloads/specdata/001.csv")
input
shiny::runApp('Programming/R/ShinyProj')
x <- 4L
class(x)
remove(ls())
getwd()
read.csv("Downloads/hw1_data2.csv")
ll <- read.csv("Downloads/hw1_data2.csv")
tail(ll, 2)
ll[47,]
ss <- apply(ll,sum(is.na))
ss <- sum(is.na(ll))
ss
ss <- sum(is.na(ll$Ozone))
ss
mean(ll, na.omit=T)
?mean
mean(ll, na.rm=T)
mean(ll, na.rm=TRUE)
mean(ll$Ozone, na.rm=TRUE)
lb <- ll[ll$Ozone > 31 && ll$Temp > 90]
lb
lb <- ll[ll$Ozone > 31 && ll$Temp > 90,]
lb
lb <- subset( ll, Ozone>31 & Temp > 90)
lb
lb <- ll[ll$Ozone > 31 & ll$Temp > 90,]
lb
lb <- ll[ll$Ozone > 31 & ll$Temp > 90 & na.omit=T,]
lb <- ll[ll$Ozone > 31 & ll$Temp > 90 & na.rm=T,]
lb <- na.rm(ll[ll$Ozone > 31 & ll$Temp > 90,])
lv <- subset(ll, Ozone >31 & temp >90)
lv <- subset(ll, Ozone >31 & Temp >90)
lv
mean(lv$Solar.R)
lv <- subset(ll, Month==8)
lv
mean(ll$Temp[ll$Month==8])
mean(ll$Temp[ll$Month==6])
?max
max.col(ll$Ozone[ll$Month==5])
max(ll$Ozone[ll$Month==5])
sapply( ll, max, na.rm=T)
sapply( ll[ll$Month==5], max, na.rm=T)
ll$Month==5
ll[ll$Month==5]
sapply(subset(ll$Ozone, Month==5), max, na.rm=T)
sapply(subset(ll, Month==5), max, na.rm=T)
sapply(subset(ll, Month==5)$Ozone, max, na.rm=T)
sapply(subset(ll, Month==5), max, na.rm=T)
x <- (1:4)
y <- 2:3
x+y
x <- c(1,2,3)
y <- c(1,2,3)
cbind(x,y)
x <- 1:4
y <- 2
x+y
head( ll)
rowsum(ll)
sum(rownames(ll))
ll
tail(ll, 2)
ll[row=47]
ll[47,]
sum(na.rm(ll$Ozone))
sum(is.na(ll$Ozone))
mean(ll$Ozone, na.rm-T)
mean(ll$Ozone, na.rm=T)
mean(subset(ll, Ozone, Month=6))
?subset
mean(ll$Temp[ll$Month==5], na.rm=True)
mean(ll$Temp[ll$Month==5], na.rm=T)
mean(ll$Temp[ll$Month==6], na.rm=T)
str(max)
max(ll$Ozone[ll$Month==5], na.rm=T)
install.packages("swirl")
install_from_swirl("R Programming")
library(swirl)
install_from_swirl("R Programming")
swirl()
5+7
nxt()
nxt()
nxt()
x <- 5 + 7
x
y <- x-3
y
c(1.1,9,3,14)
z <- c(1,2,3)
z <- c(1.1,9,3.14)
?c()
?c
z
vv <- c(z, 555, z)
c(z,555,z)
z *2 +100
my_sqrt <- sqrt(z-1)
my_sqrt
my_dic <- z/my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z *2 +100
z * 2 +  100
(z * 2 + 100)
x <- (z * 2 + 100)
info()
skip()
my_div
Sys.Date()
mean(c(2,4,5))
submit
submit()
submit()
boring_function("My first function!")
boring_function
submit()
my_mean(4,5,19)
my_mean(4,5,10)
my_mean(c(4,5,10))
skip()
remainder(5)
skip()
skip()
skip()
skip()
submit()
evaluate(c(1.4,3.6,7.9, 8.8))
evaluate(standard_deviation,c(1.4,3.6,7.9, 8.8))
skip()
evaluate(function(x){x+1}, 6)
evalutate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[-1]}, c(8,4,0))
?paste
skip()
submit9)
submit()
telegram("AA")
submit()
submit
submiT()
submit()
submit()
skip()
submit()
skip()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, classs)
cls_vect <- sapply(flags, classs)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range())
lapply(flag_shapes, range
)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_vals)
sapply(unique_vals, length)
sapply(flags, unique)
skip()
skip()
vapply(flags,unique,numeric(ยง))
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
skip
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
summary(plants)
table(plants$Active_Growth_Period)
str()
str(palnts)
str(plantss)
str(plants)
1
swirl()
sample()
SKIP()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
getwd()
setwd("Programming/R/ShinyProj/")
shiny::runApp()
